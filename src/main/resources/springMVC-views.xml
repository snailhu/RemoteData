<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd" >


	<!-- 开始spring mvc的注解 -->
<!--  	<mvc:annotation-driven/>  -->
 	<!-- 启用spring mvc 注解 -->
<!-- 	<context:annotation-config /> -->
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
<!-- 	<context:component-scan base-package="com.swp.mongodbyp.*.controller" /> -->

	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!--  
	<context:component-scan base-package=DataAn.*.controller  
        use-default-filters="false">  
        <context:include-filter type="annotation"  
            expression="org.springframework.stereotype.Controller" />  
    </context:component-scan>  
    -->
    
    <!-- 设置使用注解的类所在的jar包 -->
    <context:component-scan base-package="DataAn.common.controller"/>
	<context:component-scan base-package="DataAn.Analysis.controller"/>
	<context:component-scan base-package="DataAn.fileSystem.controller"/>
	<context:component-scan base-package="DataAn.galaxyManager.controller"/>
	<context:component-scan base-package="DataAn.linegraph.controller"/>
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<context:component-scan base-package="DataAn.wordManager.controller"/>
	<context:component-scan base-package="DataAn.reportManager.controller"/>
	<context:component-scan base-package="DataAn.sys.controller"/>
	<context:component-scan base-package="DataAn.status.controller"/>
	<context:component-scan base-package="DataAn.prewarning.controller"/>
	<context:component-scan base-package="DataAn.communicate.controller"/>

	<!-- 处理器映射器和适配器，可以使用mvc注解驱动 -->
    <mvc:annotation-driven/> 
    <mvc:default-servlet-handler />
    
    <bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>  
    
    	<!-- 统一异常处理类 -->
	<bean id="handlerExceptionResolver"
		class="exception.ExceptionResolverCustom">
		<!-- 注入一个json转换器 -->
		<property name="mappingJacksonHttpMessageConverter" ref="mappingJacksonHttpMessageConverter" />
	</bean>
    
    
    <!--对静态资源文件的访问-->
	<mvc:resources mapping="/static/**" location="/static/" />
	
	<!-- 开始spring mvc的注解 -->
	 <mvc:annotation-driven>  
        <!-- <mvc:argument-resolvers> <bean class="org.springframework.data.web.PagedResourcesAssemblerArgumentResolver"   
            /> </mvc:argument-resolvers> -->  
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                <property name="supportedMediaTypes">  
                    <list>  
                        <value>text/plain;charset=UTF-8</value>  
                        <value>text/html;charset=UTF-8</value>  
                    </list>  
                </property>  
            </bean>  
            <bean  
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                <property name="supportedMediaTypes">  
                    <list>  
                        <value>text/html;charset=UTF-8</value>  
                        <value>application/json;charset=UTF-8</value>  
                    </list>  
                </property>  
            </bean>  
        </mvc:message-converters>  
    </mvc:annotation-driven>   
        
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<!-- jsp视图解析器 -->
	<bean id="JSPviewResolver"  
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="viewClass"  
            value="org.springframework.web.servlet.view.JstlView" />  
        <property name="prefix" value="/WEB-INF/jsp/" />  
        <property name="suffix" value=".jsp" />  
        <property name="order" value="1"/>  
    </bean>  
    
	<!-- FreeMarker视图解析 如返回student。。在这里配置后缀名ftl和视图解析器。。-->  
    <bean id="freemarkerConfig"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath">    
            <value>/WEB-INF/ftl/</value>    
        </property>    
        <property name="defaultEncoding" value="UTF-8" />  
        <property name="freemarkerVariables">  
            <map>  
                <entry key="xml_escape" value-ref="fmXmlEscape" /> 
                <entry key="extends" value-ref='extendsDirective'></entry>
				<entry key="override" value-ref='overrideDirective'></entry>
				<entry key="block" value-ref='blockDirective'></entry>
				<entry key="super" value-ref='superDirective'></entry> 
            </map>  
        </property>  
        <property name="freemarkerSettings">  
            <props>  
                <!--<prop key="template_update_delay">3600</prop> -->  
                <prop key="tag_syntax">auto_detect</prop>  
                <!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="output_encoding">UTF-8</prop>  
                <prop key="locale">zh_CN</prop>  
                <prop key="date_format">yyyy-MM-dd</prop>  
                <prop key="time_format">HH:mm:ss</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="number_format">#.##</prop>  
                <!-- 设置数字格式 以免出现 000.00 -->  
                <prop key="classic_compatible">true</prop>  
                <!-- 可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue of fbysss"}的形式即可 -->  
                <prop key="template_exception_handler">html_debug</prop>  
                <!-- ignore,debug,html_debug,rethrow -->  
            </props>  
        </property>  

    </bean>
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />  
    <bean id="viewResolver"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
        <property name="viewClass"  
            value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>  
        <property name="suffix" value=".html" />  
        <property name="contentType" value="text/html;charset=utf-8" />  
        <property name="exposeRequestAttributes" value="true" />  
        <property name="exposeSessionAttributes" value="true" />  
        <property name="exposeSpringMacroHelpers" value="true" />  
        <property name="order" value="0" />  
    </bean>
    
      
    <!--定义异常处理页面 -->  
    <bean id="exceptionResolver"  
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <prop key="java.lang.Exception">outException</prop>  
            </props>  
        </property>  
    </bean>  
    	
	<!-- freemarker 模板继承支持 -->
	<bean id="blockDirective"
		class="cn.org.rapid_framework.freemarker.directive.BlockDirective" />
	<bean id="extendsDirective"
		class="cn.org.rapid_framework.freemarker.directive.ExtendsDirective" />
	<bean id="overrideDirective"
		class="cn.org.rapid_framework.freemarker.directive.OverrideDirective" />
	<bean id="superDirective"
		class="cn.org.rapid_framework.freemarker.directive.SuperDirective" />

	<!-- Freemarker配置 -->
	<!--  
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
				
			</props>
		</property>
			
		
	</bean>
	
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="requestContextAttribute" value="request" />
		<property name="suffix" value=".ftl"/>
		<property name="contentType" value="textml;charset=UTF-8"></property>
	</bean>-->
  
	
	<!-- 文件上传支持 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!--max size: 1000M -->
		<property name="maxUploadSize" value="1048576000" />
	</bean>

	<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login" />
			<mvc:exclude-mapping path="/static/**" />
			<mvc:exclude-mapping path="/Communicate/**" />
			<mvc:exclude-mapping path="/refuse" />
			<bean class="DataAn.common.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
<!-- 			<mvc:mapping path="/admin/user/**" /> -->
<!-- 			<mvc:mapping path="/admin/role/**" /> -->
<!-- 			<mvc:mapping path="/admin/permission/**" /> -->
<!-- 			<mvc:mapping path="/admin/log/**" /> -->
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login" />
			<mvc:exclude-mapping path="/static/**" />
			<mvc:exclude-mapping path="/Communicate/**" />
			<mvc:exclude-mapping path="/refuse" />
			<mvc:exclude-mapping path="/loginOut"/>
			<bean class="DataAn.common.interceptor.PermissionInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
		     			
</beans>
